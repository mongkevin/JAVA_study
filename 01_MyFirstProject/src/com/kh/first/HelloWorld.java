package com.kh.first; //패키지 선언부 : 현재 클래스 파일의 위치를 알려주는 부분(패키지의 위치)

//클래스의 풀 네임 : com.kh.first.HelloWorld
public class HelloWorld { //HelloWorld 클래스의 영역 시작
	
	//변수,메소드 ...
	
	// 한줄 주석 
	
	/* 
	 * 여러줄 주석 
	 * 한 패키지 안에 여러 클래스 또는 패키지들이 존재 가능하다.
	 * 단, 동일한 이름의 패키지나 클래스가 존재할 수는 없다.
	 * 서로 다른 패키지 안에는 동일한 이름의 패키지나 클래스가 존재할 수 있다.
	 * ex)com.kh.first.HelloWorld 와 com.kh.second.HelloWorld는 공존 가능
	 * 
	 * 기본패키지에 클래스를 만드는것은 권장하지 않는다.
	 * 관리하기 힘들고 기본패키지에 만들어진 클래스들은 다른 패키지의 클래스에서 사용 불가능하기 때문.
	 * 
	 * 권장사항)
	 * 1. 패키지는 적어도 세단계 이상으로 만들어주는 것을 권장
	 * ex) com.회사이름.프로젝트이름 또는 팀이름.카테고리 
	 * ex) com.kh.firstProject / com.naver.team
	 * 2. 패키지의 두번째 레벨까지는 도메인의 역순으로 쓴다.
	 * 도메인 주소는 고유한 이름이기 때문에 중복을 방지할 수 있고 
	 * 도메인 주소만으로도 어떤 회사가 제작한 프로젝트인지 파악 가능
	 * */
	
	//main메소드 : 프로그램의 시작점, 프로그램당 꼭 1개 이상의 메인 메소드를 가지고 있어야 한다.
	public static void main(String[] args) { //main메소드의 영역 시작
		//실행하고자 하는 코드
		System.out.print("오늘 날씨가 좋아요.");
		System.out.println("오늘은 즐거운 금요일!!");
		System.out.print("내일은 즐거운 토요일!!");
		
		/*
		 * Method : 기능을 의미
		 * 하나의 기능 단위
		 * 
		 * 하나의 클래스에 여러개의 메소드가 존재 가능하다.
		 * 메소드의 이름은 중복이 가능하지만 특정 조건을 만족하여야 한다(객체시간에 배울 내용)
		 * 
		 * 메소드는 main 메소드와 일반 메소드로 나뉜다.
		 * 메소드는 실행하는것을 호출한다 라고 부른다.
		 * 일반 메소드같은 경우에는 스스로 실행될 수 없다(단독실행 불가능)
		 * 다른 메소드에서 호출을 해줘야만 실행될 수 있다.
		 * 
		 * */
		
		//일반 메소드 호출
		printHi();
		
		
	}//main메소드 영역의 끝
	
	//일반 메소드
	public static void printHi() {
		System.out.println("안녕하십니까. 반갑습니다.");
	}
	
	
	
	
	
} //HelloWorld클래스의 끝 영역
